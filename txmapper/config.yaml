# config for Fabric SDK
fabric:
  #
  # Schema version of the content. Used by the Fabric SDK to apply the corresponding parsing rules.
  #
  version: 1.0.0
  #
  # The client section used by GO SDK.
  #
  client:
    # Which organization does this application instance belong to? The value must be the name of an org
    # defined under "organizations"
    organization: org1
    logging:
      level: info
    # Root of the MSP directories with keys and certs.
    cryptoconfig:
      # an example is the first-network sample's crypto-config directory
      path:
    # BCCSP config for the client. Used by GO SDK.
    BCCSP:
      security:
        enabled: true
        default:
          provider: "SW"
        hashAlgorithm: "SHA2"
        softVerify: true
        ephemeral: false
        level: 256
  #
  # [Optional]. But most apps would have this section so that channel objects can be constructed
  # based on the content below. If an app is creating channels, then it likely will not need this
  # section.
  #
  channels:
    # name of the channel
    mychannel:
      # Required. list of peers from participating orgs
      peers:
        peer0.org1.example.com:
          # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
          # have the chaincode installed. The app can also use this property to decide which peers
          # to send the chaincode install request. Default: true
          endorsingPeer: true

          # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
          # installed. The app can also use this property to decide which peers to send the
          # chaincode install request. Default: true
          chaincodeQuery: true

          # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
          # queryBlock(), queryTransaction(), etc. Default: true
          ledgerQuery: true

          # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
          # produce events but the app typically only needs to connect to one to listen to events.
          # Default: true
          eventSource: true

      # [Optional]. The application can use these options to perform channel operations like retrieving channel
      # config etc.
      policies:
        #[Optional] options for retrieving channel configuration blocks
        queryChannelConfig:
          #[Optional] min number of success responses (from targets/peers)
          minResponses: 1
          #[Optional] channel config will be retrieved for these number of random targets
          maxTargets: 1
          #[Optional] retry options for query config block
          retryOpts:
            #[Optional] number of retry attempts
            attempts: 5
            #[Optional] the back off interval for the first retry attempt
            initialBackoff: 500ms
            #[Optional] the maximum back off interval for any retry attempt
            maxBackoff: 5s
            #[Optional] he factor by which the initial back off period is exponentially incremented
            backoffFactor: 2.0
  #
  # list of participating organizations in this network
  #
  organizations:
    org1:
      mspid: Org1MSP
      # This org's MSP store (absolute path or relative to client.cryptoconfig)
      cryptoPath: peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp
      peers:
        - peer0.org1.example.com

  #
  # List of peers to send various requests to, including endorsement, query
  # and event listener registration.
  #
  peers:
    peer0.org1.example.com:
      # this URL is used to send endorsement and query requests
      url: localhost:7051
      grpcOptions:
        ssl-target-name-override: peer0.org1.example.com
        # These parameters should be set in coordination with the keepalive policy on the server,
        # as incompatible settings can result in closing of connection.
        # When duration of the 'keep-alive-time' is set to 0 or less the keep alive client parameters are disabled
        keep-alive-time: 0s
        keep-alive-timeout: 20s
        keep-alive-permit: false
        fail-fast: false
        # allow-insecure will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
        allow-insecure: false
      tlsCACerts:
        # Certificate location absolute path
        path:

# config for HCS
hcs:
  # block cipher config, to decrypt the HCS messages
  blockCipher:
    type: aes-256-gcm
    # base64 encoded key string
    key:
  # mirror node address to subscribe to and receive consensus responses from
  mirrorNodeAddress: hcs.testnet.mirrornode.hedera.com:5600

